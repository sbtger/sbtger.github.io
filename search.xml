<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>嵌入式系统安全笔记_ARM</title>
    <url>/2020/03/17/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0_ARM/</url>
    <content><![CDATA[<h2 id="PIC"><a href="#PIC" class="headerlink" title="PIC"></a>PIC</h2><h3 id="中断："><a href="#中断：" class="headerlink" title="中断："></a>中断：</h3><ul>
<li><p>中断分组管理（快速中断屏蔽）与控制</p>
</li>
<li><p>统一中断入口：根据中断标志位判断中断的类型。因为中断标志位始终会产生，所以开放中断前需要清除中断标志位。</p>
</li>
<li><p>边沿触发：外部中断可以边沿选择。数字信号低电平的驱动能力比较强，下降沿（更陡峭），下降时间比较短，故从可靠性的角度下降沿触发最佳。</p>
</li>
<li><p>电平变化中断：端口处有异或比较器，当变化时产生中断，从而识别边沿。</p>
</li>
</ul>
<a id="more"></a>

<h3 id="低压差稳压器（LDO）："><a href="#低压差稳压器（LDO）：" class="headerlink" title="低压差稳压器（LDO）："></a>低压差稳压器（LDO）：</h3><p>为了支持PIC芯片的普适性，内部使用type B（降低功耗），端口使用type A（提高可靠性）。</p>
<h3 id="芯片配置字："><a href="#芯片配置字：" class="headerlink" title="芯片配置字："></a>芯片配置字：</h3><p>芯片的某些引脚或硬件需要在芯片工作之前就进行配置，硬件实现。配置字中有关于复位、振荡器的规划。</p>
<h3 id="PIC端口结构："><a href="#PIC端口结构：" class="headerlink" title="PIC端口结构："></a>PIC端口结构：</h3><p>与80C51相比，引进了钳位二极管、模数选择、方向选择、上拉电阻选择.</p>
<h3 id="PIC振荡器："><a href="#PIC振荡器：" class="headerlink" title="PIC振荡器："></a>PIC振荡器：</h3><p>PIC存在内部振荡器，可以通过外部校准内部。可以控制振荡器。在响应速度、功耗和抗干扰能力三者中达到平衡。</p>
<h3 id="PIC与80C51总体比较："><a href="#PIC与80C51总体比较：" class="headerlink" title="PIC与80C51总体比较："></a>PIC与80C51总体比较：</h3><p>普适性提高，但配置比较复杂，易用性降低。</p>
<h3 id="几个关键概念："><a href="#几个关键概念：" class="headerlink" title="几个关键概念："></a>几个关键概念：</h3><p><strong>电源电压：</strong>三类（A=5V, B=3.3V, C=1.8V）。</p>
<p><strong>通用端口电平要求：</strong>H≥70%Vcc L≤30%Vcc。</p>
<p><strong>复位电平要求：</strong>H≥80%Vcc L≤12%Vcc。</p>
<p><strong>信号上升时间：</strong>10%Vcc上升到90%VCC所需要的时间。</p>
<p><strong>信号下降时间：</strong>90%Vcc下降到10%VCC所需要的时间。</p>
<p>信号上升时间一般比信号下降时间长。好的信号要求信号上升时间与下降时间≤信号周期*4%。可以通过降低频率（周期变长）来实现。</p>
<p><strong>功耗控制：</strong>P=K*F，分部件控制时钟（降低功耗且躲避干扰）。</p>
<p><strong>看门狗与可靠性：</strong>硬件看门狗发现软件的问题，产生复位。错误不可避免。每种复位不同，因此便于软件处理，恢复到之前状态。</p>
<p><strong>推挽输出与OC（OD）输出：</strong>频率高，更有利于提高速度。内部推挽输出OC，板外输出一般为OD。</p>
<h2 id="ARM架构"><a href="#ARM架构" class="headerlink" title="ARM架构"></a>ARM架构</h2><h3 id="1-ARM-体系结构"><a href="#1-ARM-体系结构" class="headerlink" title="1. ARM 体系结构"></a>1. ARM 体系结构</h3><p><strong>ARM系列微处理器扩展命名扩展符号：</strong></p>
<p><strong>T</strong> 16位<strong>Thumb</strong>指令集：硬件扩展为ARM指令集，因此为压缩指令集，不占用芯片运行的时间。</p>
<p>版本：ARMv4T、 ARMv5T和ARMv6T。</p>
<p>代码尺寸：Thumb指令编译其长度只占ARM指令的<strong>65%</strong>左右。带来<strong>功耗</strong>上的优势。但<strong>时间</strong>上会差一些，增加了指令解压以及需要比ARM更多的指令执行。在异常中断的低级处理时，还是需要使用ARM指令。如果主导因素是<strong>空间</strong>则选择<strong>Thumb</strong>，<strong>性能</strong>则ARM与Thumb指令集2者的平衡。</p>
<p><strong>D</strong> 片上调试 <strong>debug</strong>：响应调试强求暂停</p>
<p><strong>M</strong> 支持增强型<strong>乘法器</strong>：<strong>32位</strong>乘<strong>32位</strong>得到<strong>64位</strong>。ARMV4版本以后，M变种已为标准配置。增加2条AKM指令：长乘法操作和长乘加操作。有时有乘法没除法。</p>
<p><strong>I</strong> 嵌入式<strong>ICE</strong>部件：提供<strong>断点</strong>和<strong>调试点</strong>。</p>
<p><strong>E</strong> 增强DSP指令：（1）增加<strong>16位</strong>乘法和乘加。（2）实现饱和的带符号数的加减法操作的指令。溢出时，使用最大或最小值。因此代码不需要判断溢出。</p>
<p><strong>J</strong> <strong>Java</strong>加速器Jazelle：提高Java代码的运行速度，最高可达到<strong>8倍</strong>，功耗降低<strong>80%</strong>。</p>
<p><strong>S</strong> 可综合：提供VHDL或Verilog HDL硬件描述语言设计文件。</p>
<p><strong>ARM架构的版本：</strong></p>
<p>更新：（1）不断创新提升性能（2）向下兼容保护软件投入</p>
<ul>
<li><p>ARMv4T架构：每条指令1.5个时钟周期。</p>
</li>
<li><p>ARMv6架构：Thumb-2指令集。</p>
</li>
<li><p>ARMv7架构：A系列（支持大型嵌入式操作系统）、R系列（实时性）和M系列（单片机/MCU，追求低成本低功耗）。ARM Cortex系列，全部采用v7架构。</p>
</li>
</ul>
<p><strong>三种总线：</strong></p>
<p>ARM的总线体系结构是AMBA。</p>
<ul>
<li><p><strong>AHB：</strong>连接<strong>高性能</strong>系统模块。支持突发数据传输（例如DMA）。支持单个数据传输。支持分离式总线事务处理。</p>
</li>
<li><p><strong>ASB：</strong>连接<strong>高性能</strong>系统模块。支持突发数据传输。</p>
</li>
<li><p><strong>APB：</strong>简单接口。支持<strong>低性能</strong>外围接口。</p>
</li>
</ul>
<p><strong>ARM工作模式：</strong></p>
<p>用户模式（usr）、快速中断模式（fiq）、外部中断模式（irq）、管理模式（svc）、指令/数据访问终止模式（abt）、系统模式（sys）和未定义指令终止模式（und）。</p>
<p>工作模式可通过<strong>软件</strong>控制改变，也可通过<strong>外部</strong>中断或异常处理改变。</p>
<p>程序代码角度：ARM状态和Thumb状态。</p>
<p>ARM处理器核在上电或复位并开始执行程序代码时，处于ARM状态。利用指令<strong>CODE 16/32</strong>进行切换。</p>
<p><strong>内部寄存器：</strong></p>
<p>37个32位寄存器，分为通用寄存器（31）和状态寄存器（6）。</p>
<p>未分组寄存器（R0<del>R7）和分组寄存器（R8</del>R14）。程序计数器PC（R15）。程序状态寄存器CPSR（R16）。（中断禁止位、T标志位（Thumb）和工作模式位）</p>
<p><strong>异常：</strong></p>
<p>复位、未定义指令异常、软件中断异常、指令预取中止、数据中止、IRQ和FIQ（中断）。异常向量是异常服务程序的入口。</p>
<p><strong>存储器：</strong></p>
<p>支持大端存储和小端存储。ARM默认为<strong>小端存储</strong>格式。可以通过硬件输入引脚来配置。对存储单元的访问需要适当地对齐。使用存储器映射方式实现I/O端口地访问（因此<strong>没有in/out指令</strong>，统一指令实现）。</p>
<h3 id="2-ARM-存储器"><a href="#2-ARM-存储器" class="headerlink" title="2. ARM 存储器"></a>2. ARM 存储器</h3><p><strong>存储器分类：</strong></p>
<ul>
<li>主存储器：内存。只读存储器（ROM）、随机存储器（RAM）。</li>
<li>辅存储器：外设。硬盘。</li>
</ul>
<p>只读存储器（ROM）：Flash技术。CF卡、SD卡。</p>
<p><strong>NAND Flash：</strong>以<strong>页</strong>为单位读和编程操作和以<strong>块</strong>为单位进行擦除。</p>
<p>K8F1208芯片：4096个Block，每个Block有32个Page，每个Page有528字节，512字节存储+16字节<strong>校验位</strong>。因此，对NAND Flash操作的地址分为3部分：块地址、页地址和页内地址。</p>
<p><strong>存储系统机制：</strong></p>
<p>存储管理单元（MMU）：主要用来完成虚实地址和物理地址之间的转换。访问权限控制。MMU管理方式：段式、页式和段页式。</p>
<h3 id="3-ARM-时钟及电源管理"><a href="#3-ARM-时钟及电源管理" class="headerlink" title="3. ARM 时钟及电源管理"></a>3. ARM 时钟及电源管理</h3><p><strong>S3C2410时钟结构：</strong></p>
<p>不同总线对应有不同时钟。提供给<strong>CPU</strong>的<strong>FCLK</strong>、提供给<strong>AHB</strong>总线设备的<strong>HCLK</strong>和提供给<strong>APB</strong>总线设备的<strong>PCLK</strong>。</p>
<p><strong>2个锁相环（PLLs）：</strong>外部输入低频，利用闭环倍频。低频比较精准，高频不够精准。软件可以控制是否提供锁相环给某个设备，从而分级控制，降低功耗，规避干扰。1个是提供<strong>总线时钟</strong>，1个是提供<strong>USB时钟</strong>。</p>
<p><strong>S3C2410电源管理模式：</strong></p>
<p>电源管理模式（<strong>模式管理</strong>）：</p>
<ul>
<li>空闲模式（停止供给CPU核时钟）</li>
<li>正常模式（可软件控制）</li>
<li>低速模式（无PLL模式）</li>
<li>休眠/掉电模式（外部中断EINT[15:0]或RTC报警，唤醒逻辑独立供电）</li>
</ul>
<p>内核提供1.8V电压，处理器端口和存储端口提供3.3V电压。休眠模式也有1.8V。内部设备用电的电压一致，实际用电有<strong>上电延时</strong>，确保不同引脚都上电后，才进行初始化、配置和运行。</p>
<p>PS：主要思想是<strong>硬件</strong>上尽可能实现<strong>灵活性</strong>，<strong>软件</strong>工具包实现<strong>易用性</strong>。将复杂的更高层次的开发发展为软件的开发和移植。</p>
<h3 id="4-ARM-定时技术"><a href="#4-ARM-定时技术" class="headerlink" title="4. ARM 定时技术"></a>4. ARM 定时技术</h3><p>定时器是嵌入式系统重要的部件。</p>
<p>定时部件3类：看门狗、RTC部件和Timer部件。</p>
<ul>
<li><p>看门狗定时器：当程序“跑飞”时，恢复系统的运行，即监视并恢复程序正常运行。时钟（PCLK）。可能会有专用的内部振荡器。2个功能（定时器功能和复位功能）。组成部分（预分频器、再分频器、WTDAT数据寄存器、WTCNT计数器、WTCON控制寄存器和复位信号发生器）。先赋值，再启动。</p>
</li>
<li><p>RTC部件：实时时钟，软件编程支持。存在数据失联问题（例如，读时间时，高位年月或日改变，导致数据错误实联），因此数据需要多次读确保数据不失联。报警功能可以提供闹钟功能。</p>
</li>
<li><p>Timer部件：主要是脉宽调制（PWM）。任何模拟信号都可以使用PWM来实现，数字信号生成模拟信号。具有死区管理的功能。支持DMA的请求模式。DMA和CPU共同使用时，都需要控制总线，因此DMA的加入一定会影响CPU的总线执行的时序。如果需要精确的软件延时（循环实现），又要使用DMA，则计时会不准确。</p>
</li>
</ul>
<h3 id="5-ARM-中断"><a href="#5-ARM-中断" class="headerlink" title="5. ARM 中断"></a>5. ARM 中断</h3><p>对于设备的访问有：程序查询方式（效率比较低）、中断方式和DMA方式。</p>
<p><strong>特点：</strong>（1）实时性能好（2）调试较复杂（中断嵌套）</p>
<p>可以处理难以预料的故障。</p>
<p><strong>DMA方式与中断方式相比：</strong></p>
<ul>
<li>中断方式，MPU需要执行多条指令，占用一定的时间；DMA 传送1字节只占用1个总线周期，占用MPU时间少。</li>
<li>DMA的响应速度比中断快。中断需要执行完当前指令并保护现场，而DMA请求在总线周期执行完就可响应。</li>
<li>对于快速的I/O设备，中断无法满足要求，必须采用DMA的方式。</li>
</ul>
<p><strong>中断向量：</strong></p>
<p>ARM可以由软件配置使用独立中断向量或可变中断向量设计。可进行中断向量的分组。</p>
<p><strong>中断类别：</strong></p>
<p>中断主要分为普通中断（IRQ）和快速（异常）中断（FIQ）。</p>
<p><strong>中断管理：</strong></p>
<p>主要通过模式、屏蔽、优先级和挂起（标志）来实现。快速中断没有优先级的判断。</p>
<p>ARM拥有独立的中断向量和分组的中断向量（根据优先级）。</p>
<p>FIQ快速异常中断的执行优先级更高。</p>
<h3 id="6-ARM-DMA"><a href="#6-ARM-DMA" class="headerlink" title="6. ARM DMA"></a>6. ARM DMA</h3><p><strong>定义：</strong><br>DMA技术是一种高速的数据传输方式，允许在外部设备和存储器之间、存储器与存储器之间等直接传输数据。</p>
<p><strong>外部DMA请求：</strong></p>
<ul>
<li>单服务请求（突发单字节的传输）</li>
<li>单服务握手</li>
<li>全服务握手</li>
</ul>
<p><strong>CMA的知识点：</strong></p>
<ul>
<li><p>优先级</p>
</li>
<li><p>源和目的之间的关系</p>
</li>
<li><p>是否支持高速的传递</p>
</li>
<li><p>是否支持批量的传递</p>
</li>
<li><p>是否支持突发单数据传递</p>
</li>
<li><p>生成数据和数据传输完毕后，能不能产生CMA的中断</p>
</li>
<li><p>CMA的使用会影响CPU的时间</p>
</li>
</ul>
]]></content>
      <categories>
        <category>嵌入式系统安全</category>
      </categories>
      <tags>
        <tag>嵌入式系统安全</tag>
        <tag>ARM</tag>
        <tag>PIC</tag>
      </tags>
  </entry>
  <entry>
    <title>网络侦察实验</title>
    <url>/2020/03/16/%E7%BD%91%E7%BB%9C%E4%BE%A6%E5%AF%9F%E5%AE%9E%E9%AA%8C/</url>
    <content><![CDATA[<h2 id="任务四-获取目标网站的webshell权限，控制目标机，获得敏感信息"><a href="#任务四-获取目标网站的webshell权限，控制目标机，获得敏感信息" class="headerlink" title="任务四 获取目标网站的webshell权限，控制目标机，获得敏感信息"></a>任务四 获取目标网站的webshell权限，控制目标机，获得敏感信息</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>Linux指令：从命令行界面进入图形界面（下面两个指令都可）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ startx </span><br><span class="line">$ init 5</span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>Linux指令：从图形界面进入命令行界面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ init 3</span><br></pre></td></tr></table></figure>

<p>PS：实际操作中，在远程的网络安全实验平台上，使用startx一切正常，但是使用另外2条指令会出现问题。先留个坑~。</p>
<h3 id="2-创建HTML文件上传表单"><a href="#2-创建HTML文件上传表单" class="headerlink" title="2. 创建HTML文件上传表单"></a>2. 创建HTML文件上传表单</h3><p>基本知识：</p>
<p>（1） 必需的 action 属性规定当提交表单时，向何处发送表单数据。 </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"value"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（2） enctype 属性规定在发送到服务器之前应该如何对表单数据进行编码。  在使用包含文件上传控件的表单时，必须使用 multipart/form-data 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">"value"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>创建一个上传表单的简单HTML文件。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"对应提交网址处"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"file"</span>&gt;</span>filename: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"attach"</span> <span class="attr">id</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
      </tags>
  </entry>
  <entry>
    <title>网络安全笔记_DDoS攻击</title>
    <url>/2020/03/16/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AC%94%E8%AE%B0_DDoS%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h2 id="网络侦察"><a href="#网络侦察" class="headerlink" title="网络侦察"></a>网络侦察</h2><h3 id="交换式网络环境的监听："><a href="#交换式网络环境的监听：" class="headerlink" title="交换式网络环境的监听："></a>交换式网络环境的监听：</h3><p>（1）ARP欺骗（<strong>ARP spoofing</strong>）：网关的MAC和IP地址与自己的地址绑定。</p>
<p>（2）在交换机上做端口镜像，把交换机上的数据拷贝到其他端口上。</p>
<a id="more"></a>

<h3 id="口令猜测："><a href="#口令猜测：" class="headerlink" title="口令猜测："></a>口令猜测：</h3><p>（1）字典攻击。（2）基于概率的口令猜测。概率大小决定测试先后次序。</p>
<h2 id="拒绝服务攻击DoS（Denial-of-Service）"><a href="#拒绝服务攻击DoS（Denial-of-Service）" class="headerlink" title="拒绝服务攻击DoS（Denial of Service）"></a>拒绝服务攻击DoS（Denial of Service）</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>阻止或拒绝合法使用者存取网络服务器。</p>
<h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>往往是针对TCP/IP协议中的某个弱点。从某种程度上，DoS攻击永远不会消失。（资源有限，但访问存取是无限的，跟承载能力有关）从技术上，没有根本的解决办法。一个解决思路：网络基础设施上溯源。</p>
<h3 id="攻击模式："><a href="#攻击模式：" class="headerlink" title="攻击模式："></a>攻击模式：</h3><p>（1）消耗资源：针对流量的攻击、消耗磁盘空间、消耗CPU（CPU 多核 开多线程 跑死循环）和内存资源（申请内存 malloc new 递归）。未及时free易造成内存泄露的问题。</p>
<p>PS：<strong>内存泄漏（Memory Leak）：</strong>指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，造成系统内存的浪费，导致程序运行速度减慢甚至系统崩溃等严重后果。</p>
<p>（2）破坏或更改配置信息。</p>
<p>（3）物理破坏或改变网络部件。防御：加强管理。</p>
<h3 id="常见DoS攻击："><a href="#常见DoS攻击：" class="headerlink" title="常见DoS攻击："></a>常见DoS攻击：</h3><p><strong>SYN Flooding：</strong></p>
<p>利用TCP连接的常见服务端口攻击。</p>
<p>表现：短时间大量SYN包。</p>
<p>TCP连接的三次握手，存储接收到的数据，进行缓存，缓存充满使服务终止。连接请求超过超时的处理，即可最终充满。客户端利用假IP，不发送第三次响应包。</p>
<p>特点：</p>
<ul>
<li>利用TCP/IP协议的薄弱环节进行攻击</li>
<li>利用较少数据流量就可</li>
<li>攻击来源无法定位</li>
<li>在服务端无法区分TCP连接请求的合法性.</li>
</ul>
<p>应对：（1）优化系统配置（缓冲区扩大和超时时间减小）（2）优化路由器配置</p>
<p><strong>Smurf攻击：</strong></p>
<p>结合使用IP欺骗和ICMP回复的攻击。</p>
<p><strong>Ping of Death攻击</strong></p>
<p><strong>Teardrop攻击</strong></p>
<p><strong>Land攻击：</strong>设置IP为127.0.0.1，向自己发响应包。</p>
<p><strong>电子邮件轰炸</strong>：SMTP端口（25）：早期未授权访问，发送地址可以自己设定。</p>
<p>目前为ESMTP服务。hello过程之后，会有自己邮件地址和口令的认证。</p>
<p>应对：配置路由器和防火墙，识别源头。</p>
<h3 id="分布式拒绝服务攻击DDoS："><a href="#分布式拒绝服务攻击DDoS：" class="headerlink" title="分布式拒绝服务攻击DDoS："></a>分布式拒绝服务攻击DDoS：</h3><p>相比传统的DoS攻击：（1）网络资源的限制减小（2）隐蔽性高</p>
<p>DDoS的三级控制结构。客户端（Client）、中间机（Handler）和代理机（Agent）。</p>
<p>应对：</p>
<ul>
<li>在数据流中搜寻特征字符串</li>
<li>利用数据包的某些特征</li>
<li>监视本地主机端口的使用</li>
<li>对通信数据量进行统计</li>
</ul>
<h2 id="缓冲区溢出攻击"><a href="#缓冲区溢出攻击" class="headerlink" title="缓冲区溢出攻击"></a>缓冲区溢出攻击</h2><h3 id="缓冲区定义："><a href="#缓冲区定义：" class="headerlink" title="缓冲区定义："></a>缓冲区定义：</h3><p>一段连续的存储空间。（堆或栈的空间）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br></pre></td></tr></table></figure>

<p>三重含义：（1）在内存存储创建的位置（2）存储空间大小（3）数据存储格式。例如int与double不同。</p>
<h3 id="缓冲区溢出定义："><a href="#缓冲区溢出定义：" class="headerlink" title="缓冲区溢出定义："></a>缓冲区溢出定义：</h3><p>指写入缓冲区的数据量超过了该缓冲区的最大限度，造成溢出数据改写了缓冲区相邻的原始数据。</p>
<h3 id="缓冲区溢出危害："><a href="#缓冲区溢出危害：" class="headerlink" title="缓冲区溢出危害："></a>缓冲区溢出危害：</h3><ul>
<li>实现任意执行代码</li>
<li>进行DoS攻击</li>
<li>破坏关键数据，使系统的稳定性和有效性受到影响</li>
<li>进行蠕虫攻击 Morris</li>
</ul>
<h3 id="缓冲区溢出的根本原因："><a href="#缓冲区溢出的根本原因：" class="headerlink" title="缓冲区溢出的根本原因："></a>缓冲区溢出的根本原因：</h3><p>代码操作缓冲区时，没有对缓冲区边界检查，导致溢出数据改写缓冲区相邻单元的数据。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>((*d++=*s++)!=<span class="string">'\0'</span>);      <span class="comment">//strcpy函数实现</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>网络安全</category>
      </categories>
      <tags>
        <tag>网络安全</tag>
        <tag>DoS</tag>
        <tag>缓冲区溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>Orange&#39;s 一个操作系统实现 小知识点</title>
    <url>/2020/03/15/Orange&#39;s%20%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%20%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h3 id="一些小知识点"><a href="#一些小知识点" class="headerlink" title="一些小知识点"></a>一些小知识点</h3><ul>
<li><p>CPU发展</p>
<p><strong>8086</strong> 16位 CPU =&gt; <strong>80386</strong> 32位 CPU</p>
</li>
<li><p>实模式&amp;保护模式</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">进制数</th>
<th align="center">地址总线宽度</th>
<th align="center">寄存器及数据总线宽度</th>
<th align="center">寻址空间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">实模式</td>
<td align="center">16</td>
<td align="center">20</td>
<td align="center">16</td>
<td align="center">1MB</td>
</tr>
<tr>
<td align="center">保护模式</td>
<td align="center">32</td>
<td align="center">32</td>
<td align="center">32</td>
<td align="center">4GB</td>
</tr>
</tbody></table>
</li>
</ul>
<a id="more"></a>

<ul>
<li><p>段寄存器</p>
<p>32位段寄存器实际上由16位的段选择器和描述符高速缓存器组成。但描述符高速缓存器是不能直接访问的。</p>
</li>
<li><p>代码段和数据段的权限访问规则</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">特权级 低-&gt;高</th>
<th align="center">特权级 高-&gt;低</th>
<th align="center">相同特权级之间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">一致代码段</td>
<td align="center">可</td>
<td align="center">不可</td>
<td align="center">可</td>
</tr>
<tr>
<td align="center">非一致代码段</td>
<td align="center">不可</td>
<td align="center">不可</td>
<td align="center">可</td>
</tr>
<tr>
<td align="center">数据段（非一致）</td>
<td align="center">不可</td>
<td align="center">可</td>
<td align="center">可</td>
</tr>
</tbody></table>
</li>
<li><p><strong>汇编语言</strong>里的一些<strong>寄存器</strong>的功能：</p>
<p><strong>EAX</strong> 是”累加器”(accumulator), 它是很多加法乘法指令的缺省寄存器。</p>
<p><strong>EBX</strong> 是”基地址”(base)寄存器, 在内存寻址时存放基地址。</p>
<p><strong>ECX</strong> 是计数器(counter), 是重复(REP)前缀指令和LOOP指令的内定计数器。</p>
<p><strong>EDX</strong> 则总是被用来放整数除法产生的余数。</p>
<p><strong>ESI/EDI</strong>分别叫做”源/目标索引寄存器”(source/destination index),因为在很多字符串操作指令中, DS:ESI指向源串,而ES:EDI指向目标串。</p>
<p><strong>EBP</strong>是”基址指针”(BASE POINTER), 它最经常被用作高级语言函数调用的”框架指针”(frame pointer)。</p>
<p><strong>ESP</strong> 专门用作堆栈指针，被形象地称为栈顶指针，堆栈的顶部是地址小的区域，压入堆栈的数据越多，ESP也就越来越小。在32位平台上，ESP每次减少4字节。</p>
</li>
<li><p><strong>寄存器EAX、AX、AH和AL之间的关系：</strong></p>
<p>EAX 为32位。</p>
<p>AX为EAX低16位。</p>
<p>AH为AX高8位，AL为AX低8位。</p>
</li>
<li><p><strong>dd、dw和db：</strong></p>
<p>汇编语言中dd、dw和db分别代表4个字节、2个字节和1个字节。</p>
</li>
<li><p><strong>汇编指令JC：</strong></p>
<p>汇编指令，当进位标志CF=1，即有进位时，跳转。</p>
</li>
<li><p><strong>标志位寄存器：</strong></p>
<p><img src="/2020/03/15/Orange's%20%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%20%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/2.png" alt="2"></p>
</li>
<li><p><strong>汇编指令cmp：</strong></p>
<p>cmp指令格式:  cmp  操作对象1, 操作对象2</p>
<p>计算（操作对象1 - 操作对象2），但不保存结果，只是根据结果修改相应的标志位。 </p>
</li>
<li><p><strong>汇编指令jne：</strong></p>
<p>jne是汇编指令中的一个条件转移指令。当ZF=0，转至标号处执行。当ZF=1，顺序执行。</p>
</li>
<li><p><strong>地址描述符结构ARDS：</strong></p>
<table>
<thead>
<tr>
<th><strong>Offset</strong></th>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>BaseAddrLow</td>
<td>基地址的低32位</td>
</tr>
<tr>
<td>4</td>
<td>BaseAddrHigh</td>
<td>基地址的高32位</td>
</tr>
<tr>
<td>8</td>
<td>LengthLow</td>
<td>长度(字节)的低32位</td>
</tr>
<tr>
<td>12</td>
<td>LengthHigh</td>
<td>长度(字节)的高32位</td>
</tr>
<tr>
<td>16</td>
<td>Type</td>
<td>这个地址范围的地址类型</td>
</tr>
</tbody></table>
<p><strong>Type取值及其意义：</strong></p>
<table>
<thead>
<tr>
<th><strong>Value</strong></th>
<th><strong>Name</strong></th>
<th><strong>Description</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>AddressRangeMemory</td>
<td>这个内存段是一段可以被OS使用的RAM</td>
</tr>
<tr>
<td>2</td>
<td>AddressRangeReserved</td>
<td>这个地址段正在被使用,或者被系统保留,所以一定不要被OS使用</td>
</tr>
<tr>
<td>Other</td>
<td>Undefined</td>
<td>保留为未来使用,任何其它值都必需被OS认为是AddressRangeReserved</td>
</tr>
</tbody></table>
</li>
<li><p><strong>汇编指令inc&amp;dec：</strong></p>
<p>自加1和自减1指令。</p>
</li>
<li><p><strong>汇编指令ja&amp;jb：</strong></p>
<p>指令JA表示 CF=0 且ZF=0 即A&gt;B转移。</p>
<p>指令JB表示 CF=1 且ZF=0 即A &lt;B转移。</p>
</li>
<li><p><strong>汇编指令跳转部分：</strong></p>
<p>JAE/JNB 大于或等于转移.<br>JB/JNAE 小于转移.<br>JBE/JNA 小于或等于转移.<br>以上四条,测试<strong>无符号整数运算</strong>的结果(<strong>标志C和Z</strong>).<br>JE/JZ　等于转移.<br>JNE/JNZ 不等于时转移.<br>JC　　　有进位（CF）时转移.<br>JNC　　无进位（CF）时转移.<br>JNO　　不溢出时转移.<br>JNP/JPO 奇偶性为奇数时转移.<br>JNS　　符号位为 “0” 时转移.<br>JO　　　溢出转移.<br>JP/JPE　奇偶性为偶数时转移.<br>JS　　　符号位为 “1” 时转移.</p>
</li>
<li><p>保护模式不能直接调用实模式下的中断</p>
</li>
<li><p>硬件中断与软件中断</p>
</li>
<li><p>同步中断（与CPU相关）与异步中断（外部不可抗因素）</p>
</li>
<li><p>Fault（如缺页） Trap（） Abort（严重错误）</p>
</li>
<li><p>IDT建立保护模式下的中断（GDT保护模式下段机制）</p>
</li>
<li><p>中断和异常分配表</p>
<p><img src="/2020/03/15/Orange's%20%E4%B8%80%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%9E%E7%8E%B0%20%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/1.PNG" alt="1"></p>
</li>
<li><p><strong>bochs调试反汇编指令：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ndisasm -o 0x7c00 boot.bin &gt;&gt; disboot.asm</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>在bochs的dos下调试：</strong></p>
<p>先在文件开始位置添加指令jmp $，然后在反汇编的文件中找到自己想要跳转的位置eip。然后在bochs的dos中运行，陷入死循环。在bochs中，利用ctrl+c中断调试，利用r看寄存器的值，利用set $eip=0x…值，利用s进行单步调试。</p>
</li>
<li><p><strong>lodsb指令：</strong></p>
<p>LODSB/LODSW/LODSD</p>
<p>功能：将DS：SI/ESI所指的源串元素装入累加器(AL，AX，EAX)中，每装入一次都按照DF值以及串元素类型自动修改地址指针SI/ESI，该指令一般不须加重复前缀，并且不影响标志位。</p>
</li>
<li><p><strong>Bochs命令：</strong></p>
<p>挂载：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount -o loop a.img /mnt/floppy/</span><br><span class="line">sudo cp kernel.bin /mnt/floppy/</span><br><span class="line">sudo umount /mnt/floppy/</span><br></pre></td></tr></table></figure>

<p>copy：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /home/username/桌面/boot.asm ./</span><br></pre></td></tr></table></figure>

<p>更新引导程序：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dd <span class="keyword">if</span>=boot.bin of=a.img bs=512 count=1 conv=notrunc</span><br></pre></td></tr></table></figure>

<p>运行Bochs：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bochs -f bochsrc</span><br></pre></td></tr></table></figure>

<p>nasm编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nasm loader.asm -o loader.bin</span><br><span class="line"></span><br><span class="line">nasm -f elf kliba.asm -o kliba.o</span><br></pre></td></tr></table></figure>

<p>gcc编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc -c start.c -o start.o</span><br></pre></td></tr></table></figure>

<p>ld链接：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ld -s -Ttext 0x30400 -o kernel.bin kernel.o string.o start.o</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>关于GPU服务器的一点小经验</title>
    <url>/2020/03/15/%E5%85%B3%E4%BA%8EGPU%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E4%B8%80%E7%82%B9%E5%B0%8F%E7%BB%8F%E9%AA%8C/</url>
    <content><![CDATA[<p><strong>主要目的：</strong>跑一些深度学习的代码，但是自己笔记本显卡内存比较小，运行速度也比较慢。</p>
<p>下面介绍一下对几个使用过的云GPU服务器的看法：</p>
<a id="more"></a>

<p>PS：使用<strong>专业版</strong>Pycharm，可以远程调用GPU云服务器来运行程序，但<strong>家庭版</strong>Pycharm则不具备该功能。</p>
<ul>
<li><p><strong>腾讯云：</strong>最一开始使用的是腾讯云。因为感觉大厂有保障，的确还不错但就是价格较高，服务器价格比其他网站贵了很多。有云端对象存储COS，1RMB=6个月50G的空间（利用代码可以实现云端上传/下载，速度较快，比家里的垃圾网速强好多）。感觉还不错。</p>
<p>网址：<a href="https://cloud.tencent.com/" target="_blank" rel="noopener"><strong>腾讯云</strong></a></p>
</li>
<li><p><strong>MistGPU：</strong>新用户有8RMB的代金券。价格较低。1080ti=3RMB/小时。2080ti=4RMB/小时。但上传速度慢（可以使用腾讯云对象存储的数据集，写一个python脚本，实现云端下载，速度飞快，比家里的垃圾网速强好多）。PS：IP地址显示为阿里云。</p>
<p>网址：<a href="https://mistgpu.cn/" target="_blank" rel="noopener"><strong>MistGPU</strong></a></p>
</li>
<li><p><strong>Colab：</strong>Google旗下的一个Jupyter笔记本的运行环境。不需要任何设置就可以直接使用，完全在云端运行。薅资本主义的羊毛。GPU也由之前的K80更换为了T4（其实感觉免费的没有达到T4）。但需要科学上网来使用Google Drive。另外，Google Drive的大文件的上传速度惊人的慢（大于1G的文件），也许是因为需要科学上网的缘故。运行一些小型的训练模型没问题，但大型的训练模型则需要最好使用Colab Pro，$9.99/月。订阅后可以获得T4和P100 GPU计算资源，还可能优先分配到TPU。但需要美国的信用卡美元订阅支付。</p>
<p>网址：<a href="https://colab.research.google.com/notebooks/intro.ipynb" target="_blank" rel="noopener"><strong>Colab</strong></a></p>
</li>
</ul>
<p>用到现在，感觉最佳组合是腾讯云对象存储（最近搞活动，1RMB=6个月50G的空间，感觉超值，也有免费的空间）+ MistGPU。价格可以接受，配置也比较不错。另外，淘宝上也有相关的GPU包天的服务，感觉蛮麻烦的就没有试。</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>云服务器</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Hexo的4个常用命令："><a href="#Hexo的4个常用命令：" class="headerlink" title="Hexo的4个常用命令："></a>Hexo的4个常用命令：</h3><a id="more"></a>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g  <span class="comment">#generate 生成静态文件。</span></span><br><span class="line">$ hexo s  <span class="comment">#server 启动服务器。可本地预览。</span></span><br><span class="line">$ hexo d  <span class="comment">#deploy 部署网站同步到github。</span></span><br><span class="line">$ hexo clean  <span class="comment">#clean 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span></span><br></pre></td></tr></table></figure>
<p>详细信息：<a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a>、<a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a>和<a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="本地预览的默认本地地址"><a href="#本地预览的默认本地地址" class="headerlink" title="本地预览的默认本地地址"></a>本地预览的默认本地地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost:4000&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="写文章"><a href="#写文章" class="headerlink" title="写文章"></a>写文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt; <span class="comment"># 新建文章</span></span><br></pre></td></tr></table></figure>

<p>详细信息：<a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="一般修改后重新运行"><a href="#一般修改后重新运行" class="headerlink" title="一般修改后重新运行"></a>一般修改后重新运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
